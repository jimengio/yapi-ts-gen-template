import { IJimuApiOption } from "@jimengio/api-base";
import { Id } from "@jimengio/yapi-ts-generator/lib/types";
/** Generated by generator */
export declare let genSeedApiTree: {
    tasks: {
        /** 任务列表 */
        GET: (q?: IApiQuery_Tasks, opts?: IJimuApiOption) => Promise<IApiResultGet_Tasks>;
        /** 任务列表 */
        useGET: (q?: IApiQuery_Tasks, opts?: IJimuApiOption) => {
            result: IApiResultGet_Tasks;
            loadData: (options?: IApiQuery_Tasks, apiOptions?: IJimuApiOption) => Promise<void>;
            isLoading: boolean;
        };
        /** 任务列表 */
        dynamicGET: () => {
            result: IApiResultGet_Tasks;
            loadData: (params: {}, options?: IApiQuery_Tasks, apiOptions?: IJimuApiOption) => Promise<void>;
            isLoading: boolean;
            getUrl: (params: {}, query: IApiQuery_Tasks, pathOnly?: boolean) => string;
        };
        /** 添加任务 */
        POST: (body: IApiBodyPost_Tasks, opts?: IJimuApiOption) => Promise<IApiResultPost_Tasks>;
        /** 添加任务 */
        usePOST: () => {
            request: (body: IApiBodyPost_Tasks, options?: any, apiOptions?: IJimuApiOption) => Promise<IApiResultPost_Tasks>;
            isLoading: boolean;
        };
        /** 添加任务 */
        dynamicPOST: () => {
            request: (params: {}, body: IApiBodyPost_Tasks, options?: {}, apiOptions?: IJimuApiOption) => Promise<IApiResultPost_Tasks>;
            isLoading: boolean;
            getUrl: (params: {}, pathOnly?: boolean) => string;
        };
        dict: {
            /** 任务字典 */
            GET: (opts?: IJimuApiOption) => Promise<IApiResultGet_TasksDict>;
            /** 任务字典 */
            useGET: (opts?: IJimuApiOption) => {
                result: IApiResultGet_TasksDict;
                loadData: (options?: any, apiOptions?: IJimuApiOption) => Promise<void>;
                isLoading: boolean;
            };
            /** 任务字典 */
            dynamicGET: () => {
                result: IApiResultGet_TasksDict;
                loadData: (params: {}, options?: {}, apiOptions?: IJimuApiOption) => Promise<void>;
                isLoading: boolean;
                getUrl: (params: {}, query: {}, pathOnly?: boolean) => string;
            };
        };
        _: {
            /** 更新任务 */
            PUT: (id: Id, body: IApiBodyPut_Tasks_, opts?: IJimuApiOption) => Promise<IApiResultPut_Tasks_>;
            /** 更新任务 */
            usePUT: (id: Id) => {
                request: (body: IApiBodyPut_Tasks_, options?: any, apiOptions?: IJimuApiOption) => Promise<IApiResultPut_Tasks_>;
                isLoading: boolean;
            };
            /** 更新任务 */
            dynamicPUT: () => {
                request: (params: {
                    id: Id;
                }, body: IApiBodyPut_Tasks_, options?: {}, apiOptions?: IJimuApiOption) => Promise<IApiResultPut_Tasks_>;
                isLoading: boolean;
                getUrl: (params: {
                    id: Id;
                }, pathOnly?: boolean) => string;
            };
            /** 删除任务 */
            DELETE: (id: Id, opts?: IJimuApiOption) => Promise<void>;
            /** 删除任务 */
            useDELETE: (id: Id) => {
                request: (apiOptions?: IJimuApiOption) => Promise<void>;
                isLoading: boolean;
            };
            /** 删除任务 */
            dynamicDELETE: () => {
                request: (params: {
                    id: Id;
                }, apiOptions?: IJimuApiOption) => Promise<void>;
                isLoading: boolean;
            };
        };
    };
    user: {
        accesses: {
            _: {
                /** 删除登录记录 */
                DELETE: (id: Id, opts?: IJimuApiOption) => Promise<void>;
                /** 删除登录记录 */
                useDELETE: (id: Id) => {
                    request: (apiOptions?: IJimuApiOption) => Promise<void>;
                    isLoading: boolean;
                };
                /** 删除登录记录 */
                dynamicDELETE: () => {
                    request: (params: {
                        id: Id;
                    }, apiOptions?: IJimuApiOption) => Promise<void>;
                    isLoading: boolean;
                };
            };
        };
        info: {
            /** 更新用户信息 */
            POST: (body: IApiBodyPost_UserInfo, opts?: IJimuApiOption) => Promise<IApiResultPost_UserInfo>;
            /** 更新用户信息 */
            usePOST: () => {
                request: (body: IApiBodyPost_UserInfo, options?: any, apiOptions?: IJimuApiOption) => Promise<IApiResultPost_UserInfo>;
                isLoading: boolean;
            };
            /** 更新用户信息 */
            dynamicPOST: () => {
                request: (params: {}, body: IApiBodyPost_UserInfo, options?: {}, apiOptions?: IJimuApiOption) => Promise<IApiResultPost_UserInfo>;
                isLoading: boolean;
                getUrl: (params: {}, pathOnly?: boolean) => string;
            };
            /** 更新用户信息 */
            PUT: (body: IApiBodyPut_UserInfo, opts?: IJimuApiOption) => Promise<IApiResultPut_UserInfo>;
            /** 更新用户信息 */
            usePUT: () => {
                request: (body: IApiBodyPut_UserInfo, options?: any, apiOptions?: IJimuApiOption) => Promise<IApiResultPut_UserInfo>;
                isLoading: boolean;
            };
            /** 更新用户信息 */
            dynamicPUT: () => {
                request: (params: {}, body: IApiBodyPut_UserInfo, options?: {}, apiOptions?: IJimuApiOption) => Promise<IApiResultPut_UserInfo>;
                isLoading: boolean;
                getUrl: (params: {}, pathOnly?: boolean) => string;
            };
        };
        me: {
            /** 用户信息 */
            GET: (q?: IApiQuery_UserMe, opts?: IJimuApiOption) => Promise<IApiResultGet_UserMe>;
            /** 用户信息 */
            useGET: (q?: IApiQuery_UserMe, opts?: IJimuApiOption) => {
                result: IApiResultGet_UserMe;
                loadData: (options?: IApiQuery_UserMe, apiOptions?: IJimuApiOption) => Promise<void>;
                isLoading: boolean;
            };
            /** 用户信息 */
            dynamicGET: () => {
                result: IApiResultGet_UserMe;
                loadData: (params: {}, options?: IApiQuery_UserMe, apiOptions?: IJimuApiOption) => Promise<void>;
                isLoading: boolean;
                getUrl: (params: {}, query: IApiQuery_UserMe, pathOnly?: boolean) => string;
            };
        };
    };
    users: {
        /** 用户列表 */
        GET: (q?: IApiQuery_Users, opts?: IJimuApiOption) => Promise<IApiResultGet_Users>;
        /** 用户列表 */
        useGET: (q?: IApiQuery_Users, opts?: IJimuApiOption) => {
            result: IApiResultGet_Users;
            loadData: (options?: IApiQuery_Users, apiOptions?: IJimuApiOption) => Promise<void>;
            isLoading: boolean;
        };
        /** 用户列表 */
        dynamicGET: () => {
            result: IApiResultGet_Users;
            loadData: (params: {}, options?: IApiQuery_Users, apiOptions?: IJimuApiOption) => Promise<void>;
            isLoading: boolean;
            getUrl: (params: {}, query: IApiQuery_Users, pathOnly?: boolean) => string;
        };
        _: {
            /** 获取特定用户 */
            GET: (id: Id, opts?: IJimuApiOption) => Promise<IApiResultGet_Users_>;
            /** 获取特定用户 */
            useGET: (id: Id, opts?: IJimuApiOption) => {
                result: IApiResultGet_Users_;
                loadData: (options?: any, apiOptions?: IJimuApiOption) => Promise<void>;
                isLoading: boolean;
            };
            /** 获取特定用户 */
            dynamicGET: () => {
                result: IApiResultGet_Users_;
                loadData: (params: {
                    id: Id;
                }, options?: {}, apiOptions?: IJimuApiOption) => Promise<void>;
                isLoading: boolean;
                getUrl: (params: {
                    id: Id;
                }, query: {}, pathOnly?: boolean) => string;
            };
        };
    };
};
export interface IApiBodyPost_Tasks {
    title?: string;
    content?: string;
    createdAt?: string;
    /** 优先级 1-5 */
    priority?: number;
    finished?: boolean;
}
export interface IApiBodyPost_UserInfo {
    name: string;
    gender: string;
}
export interface IApiBodyPut_Tasks_ {
    id?: string;
    title: string;
    content: string;
    createdAt?: string;
    priority?: number;
    finished: boolean;
}
export interface IApiBodyPut_UserInfo {
    id?: string;
    name?: string;
    position?: {
        id: string;
        name: string;
    };
}
export interface IApiQuery_Tasks {
    priority?: any;
    createdAt?: any;
    finished?: any;
}
export interface IApiQuery_UserMe {
    /** 包含详细职位信息 */
    withPosition?: any;
}
export interface IApiQuery_Users {
    /** 按照职位筛选 */
    positionId?: string;
}
export interface IApiResultGet_TasksDict {
    [taskId: string]: {
        id: string;
        title: string;
        content: string;
        finished: string;
        createdAt?: string;
        priority?: string;
    };
}
export interface IApiResultGet_UserMe {
    id: string;
    name: string;
    /** 职位信息 */
    position?: {
        id?: string;
        name?: string;
    };
}
export interface IApiResultGet_Users {
    result?: {
        id?: string;
        name?: string;
        position?: {
            id?: string;
            name?: string;
        };
    }[];
    total?: number;
}
export interface IApiResultGet_Users_ {
    id: string;
    name: string;
    position?: {
        id: string;
        name: string;
    };
}
export interface IApiResultPost_Tasks {
}
export interface IApiResultPost_UserInfo {
    id: string;
    name: string;
}
export interface IApiResultPut_Tasks_ {
    id: string;
    title: string;
    content: string;
    createdAt?: string;
    priority?: number;
    finished?: boolean;
}
export interface IApiResultPut_UserInfo {
    id: string;
    name: string;
    position: {
        id: string;
        name: string;
    };
}
export declare type IApiResultGet_Tasks = {
    id: string;
    title: string;
    content: string;
    createdAt?: string;
    /** 优先级, 1 - 5 */
    priority?: number;
    /** 完成状态 */
    finished: boolean;
}[];
